<div class="grid-section">
  <div class="tisso-vision-text">TISSO VISON IN THE WILD</div>
<!-- Product Grid -->
<div class="grid-container">
  {% for product in collections.all.products limit:6 %}
    <div class="grid-item">
      <img src="{{ product.featured_image | img_url: 'large' }}" alt="{{ product.title }}">
      <button class="grid-popup-btn" 
              data-product-id="{{ product.id }}"
              data-image="{{ product.featured_image | img_url: 'large' }}"
              data-title="{{ product.title }}"
              data-price="{{ product.price | money }}"
              data-description="{{ product.description | strip_html }}">
        +
      </button>
    </div>
  {% endfor %}
</div>

<!-- Popup -->
<div class="grid-popup-overlay">
  <div class="grid-popup">
    <span class="grid-close-popup">&times;</span>
    <div class="grid-popup-content">
      <img id="popup-image" src="" alt="">
      <h2 id="popup-title"></h2>
      <p id="popup-price"></p>
      <p id="popup-description"></p>
      
      <!-- Color Selection Boxes -->
      <div id="popup-color" class="color-options"></div>

      <!-- Size Dropdown -->
      <select id="popup-size" class="size-dropdown">
        <option value="">Choose your size</option>
        <option value="XS">XS</option>
        <option value="S">S</option>
        <option value="M">M</option>
        <option value="L">L</option>
      </select>

      <button class="grid-add-to-cart">ADD TO CART â†’</button>
    </div>
  </div>
</div>

<!-- CSS Styles -->
<style>
    /* Grid Section */
  .grid-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
  }

  /* Tisso Vison Text (Above Grid) */
  .tisso-vision-text {
    font-size: 20px;
    font-weight: bold;
    text-transform: uppercase;
    color: black;
    letter-spacing: 1px;
    margin-bottom: 15px; /* Adds spacing between text and grid */
  }
  /* Grid Layout */
  .grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    padding: 20px;
  }

  .grid-item {
    position: relative;
    overflow: hidden;
    border-radius: 10px;
  }

  .grid-item img {
    width: 100%;
    display: block;
    border-radius: 10px;
    transition: transform 0.3s ease-in-out;
  }

  .grid-item:hover img {
    transform: scale(1.05);
  }

  /* + Button */
  .grid-popup-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: black;
    color: white;
    border: none;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    font-size: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s;
  }

  .grid-popup-btn:hover {
    background: #444;
  }

  /* Popup Animation */
  .grid-popup {
    transform: scale(0.8);
    opacity: 0;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
  }

  .grid-popup-overlay.active .grid-popup {
    transform: scale(1);
    opacity: 1;
  }

  /* Popup Styles */
  .grid-popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .grid-popup {
    background: white;
    padding: 20px;
    border-radius: 8px;
    width: 375px;
    position: relative;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    text-align: center;
  }

  .grid-close-popup {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
  }

  .grid-popup-content img {
    width: 100%;
    border-radius: 8px;
    margin-bottom: 10px;
  }

  /* Color Options */
  .color-options {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-top: 10px;
  }

  .color-box {
    display: flex;
    width: 120px;
    height: 40px;
    border: 2px solid black;
    cursor: pointer;
    overflow: hidden;
    font-size: 14px;
    font-weight: bold;
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  }

  .color-box .left, .color-box .right {
    width: 50%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .color-box.selected {
    border: 3px solid black;
    animation: bounce 0.3s ease-in-out;
  }

  @keyframes bounce {
    0% { transform: scale(1); }
    50% { transform: scale(1.15); }
    100% { transform: scale(1); }
  }

  .color-box:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Size Dropdown */
  .size-dropdown {
    width: 120px;
    height: 40px;
    border: 2px solid black;
    font-size: 16px;
    padding: 5px;
    background: white;
    cursor: pointer;
  }

  .grid-add-to-cart {
    background: black;
    color: white;
    border: none;
    padding: 10px;
    width: 100%;
    cursor: pointer;
    border-radius: 5px;
    transition: background 0.3s;
  }

  .grid-add-to-cart:hover {
    background: #444;
  }
  @media screen and (max-width: 768px) {
  .grid-container {
    grid-template-columns: repeat(2, 1fr); /* 2 columns for medium screens */
    gap: 8px;
    padding: 10px;
  }

  .grid-item img {
    height: 120px; /* Maintain consistency */
  }

  .grid-popup {
    width: 95vw;
    max-width: 350px;
  }

  .grid-popup-content {
    padding: 10px;
  }

  .grid-popup-content h2 {
    font-size: 18px;
  }

  .grid-popup-content p {
    font-size: 14px;
  }

  /* Make Buttons More Mobile-Friendly */
  .grid-popup-btn, .grid-add-to-cart {
    width: 100%;
    height: 40px;
    font-size: 14px;
  }

  /* Adjust Color Selection Boxes */
  .color-options {
    flex-wrap: wrap;
  }

  .color-box {
    width: 100px;
    height: 35px;
    font-size: 12px;
  }
}

/* ðŸ“± Smaller Mobile Screens */
@media screen and (max-width: 480px) {
  .grid-container {
    grid-template-columns: repeat(1, 1fr); /* 1 column for very small screens */
  }

  .grid-popup {
    width: 100vw;
    max-width: 300px;
  }

  .grid-popup-content h2 {
    font-size: 16px;
  }

  .grid-popup-content p {
    font-size: 12px;
  }

  .grid-popup-btn {
    width: 30px;
    height: 30px;
    font-size: 14px;
  }

  .size-dropdown {
    font-size: 14px;
    height: 35px;
  }

  .grid-add-to-cart {
    height: 38px;
    font-size: 14px;
  }
}
</style>

<!-- JavaScript -->
<script>
document.addEventListener("DOMContentLoaded", function () {
  const popupOverlay = document.querySelector(".grid-popup-overlay");
  const popup = document.querySelector(".grid-popup");
  const closePopup = document.querySelector(".grid-close-popup");

  document.querySelectorAll(".grid-popup-btn").forEach(button => {
    button.addEventListener("click", function () {
      popupOverlay.classList.add("active");
      popupOverlay.style.display = "flex";

      document.getElementById("popup-image").src = this.getAttribute("data-image");
      document.getElementById("popup-title").innerText = this.getAttribute("data-title");
      document.getElementById("popup-price").innerText = this.getAttribute("data-price");
      document.getElementById("popup-description").innerText = this.getAttribute("data-description");

      const colorContainer = document.getElementById("popup-color");
      colorContainer.innerHTML = "";

      const colorPairs = [
        ["blue", "black"], 
        ["red", "grey"],   
        ["white", "black"],
        ["grey", "black"]
      ].slice(0, 2); 

      colorPairs.forEach(([leftColor, rightColor]) => {
        const colorBox = document.createElement("div");
        colorBox.classList.add("color-box");

        colorBox.innerHTML = `<div class="left" style="background:${leftColor}">${leftColor}</div>
                              <div class="right" style="background:${rightColor}">${rightColor}</div>`;

        colorBox.addEventListener("click", function () {
          document.querySelectorAll(".color-box").forEach(box => box.classList.remove("selected"));
          this.classList.add("selected");
        });

        colorContainer.appendChild(colorBox);
      });
    });
  });

  // âœ… Close the popup when clicking the close button
  closePopup.addEventListener("click", () => {
    popupOverlay.classList.remove("active");
    setTimeout(() => { popupOverlay.style.display = "none"; }, 300); // Hide after animation
  });

  // âœ… Close the popup when clicking outside the popup
  popupOverlay.addEventListener("click", (e) => {
    if (e.target === popupOverlay) {
      popupOverlay.classList.remove("active");
      setTimeout(() => { popupOverlay.style.display = "none"; }, 300);
    }
  });
});

</script>
